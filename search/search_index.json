{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"amp-benchkit Documentation","text":"<p>Welcome to the official documentation for amp-benchkit, a Python-based toolkit for automating amplifier bench measurements and providing a Qt GUI front-end for manual control.</p>"},{"location":"#what-youll-find-here","title":"What You'll Find Here","text":"<ul> <li>Quickstart instructions for cloning the repo, enabling fake hardware, and running the GUI or CLI workflows.</li> <li>Hardware bring-up notes for the FeelTech FY3200S generator, Tektronix TDS2024B scope, and LabJack U3-HV DAQ\u2014including simulator fallbacks.</li> <li>Developer workflow guidance covering virtual environments, linting, and pytest usage.</li> <li>Reference pages for configuration environment variables, GUI layout, and testing expectations.</li> </ul>"},{"location":"#project-goals","title":"Project Goals","text":"<ol> <li>Automate repeatable signal-generation and capture sequences across supported instruments.</li> <li>Provide a cross-platform Qt GUI for manual smoke checks and lab workflows.</li> <li>Offer simulator modes so contributors can test without physical hardware.</li> </ol>"},{"location":"#useful-links","title":"Useful Links","text":"<ul> <li>Repository: github.com/bwedderburn/amp-benchkit</li> <li>Issue tracker: GitHub Issues</li> <li>Release history: Releases</li> </ul> <p>Move on to the Quickstart to get your development environment set up.</p>"},{"location":"configuration/","title":"Configuration &amp; Environment","text":""},{"location":"configuration/#core-environment-variables","title":"Core Environment Variables","text":"Variable Purpose Default <code>AMPBENCHKIT_FAKE_HW</code> Enable simulator paths for scope/generator/DAQ <code>0</code> (real hardware) <code>AMPBENCHKIT_SESSION_DIR</code> Directory to store captures/results <code>results/</code> <code>FY_PORT</code> Override FeelTech serial port discovery auto-detect <code>VISA_RESOURCE</code> Override Tektronix VISA resource string auto-detect <code>U3_CONNECTION</code> Force LabJack connection type (<code>usb</code> or <code>ethernet</code>) <code>usb</code> <code>AMP_HIL</code> Flag to enable hardware-in-loop pytest suite unset <p>Set variables per session (macOS/Linux):</p> <pre><code>export AMPBENCHKIT_FAKE_HW=1\nexport FY_PORT=/dev/tty.usbserial-XYZ\n</code></pre>"},{"location":"configuration/#session-output","title":"Session Output","text":"<ul> <li>Local experiment artifacts live under <code>results/</code> (now ignored by Git).</li> <li>To keep a clean history, store shareable captures in versioned directories (e.g., <code>results/v0.3.6/</code>).</li> </ul>"},{"location":"configuration/#logging","title":"Logging","text":"<ul> <li>The automation workflow accepts a <code>logger</code> callable to aggregate messages.</li> <li>The GUI surfaces instrument logs in the Diagnostics tab; persist to disk via session directory configuration.</li> </ul>"},{"location":"configuration/#updating-dependencies","title":"Updating Dependencies","text":"<ul> <li>Runtime pins are managed in <code>pyproject.toml</code> and <code>requirements.txt</code>.</li> <li>Use <code>pip install -e .[dev,test,gui]</code> to update your environment.</li> <li>Docs tooling lives under the <code>docs</code> optional extra (<code>pip install .[docs]</code>).</li> </ul>"},{"location":"configuration/#secrets","title":"Secrets","text":"<p>Never commit credentials, instrument serial numbers, or lab IPs. Use environment variables or <code>.env</code> files excluded via <code>.gitignore</code>.</p>"},{"location":"development/","title":"Development Workflow","text":""},{"location":"development/#coding-standards","title":"Coding Standards","text":"<ul> <li>Target Python 3.10+ with type hints on public APIs.</li> <li>Formatting: <code>black</code> (line length 100) and <code>ruff</code>. Both run via <code>pre-commit</code>.</li> <li>Naming:</li> <li>Modules/functions: <code>snake_case</code></li> <li>Qt widgets/classes: <code>CamelCase</code></li> <li>Constants/env keys: <code>SCREAMING_SNAKE_CASE</code></li> </ul> <p>Run the linters before committing:</p> <pre><code>pre-commit run --all-files\n</code></pre>"},{"location":"development/#testing","title":"Testing","text":"<ul> <li>Unit tests live in <code>tests/</code>, mirroring the <code>amp_benchkit/</code> package layout.</li> <li>Common command:</li> </ul> <p><code>bash   AMPBENCHKIT_FAKE_HW=1 python -m pytest -q</code></p> <ul> <li>Hardware-dependent tests auto-skip when devices are offline.</li> <li>Add golden CSV/JSON fixtures beside tests when validating capture pipelines.</li> </ul>"},{"location":"development/#virtual-environment-helpers","title":"Virtual Environment Helpers","text":"<p>The repository ships with a bootstrap script for Python 3.12:</p> <pre><code>scripts/bootstrap-venv312.sh\n</code></pre> <p>Adjust script versions as needed and commit updates so the team can reproduce your environment.</p>"},{"location":"development/#commit-pr-guidelines","title":"Commit &amp; PR Guidelines","text":"<ul> <li>Use imperative commit subjects (e.g., \u201cAdd scope simulator hooks\u201d).</li> <li>Before pushing run:   <code>bash   pre-commit run --all-files   python -m pytest -q</code></li> <li>Update <code>CHANGELOG.md</code> for user-visible changes and attach screenshots/artifacts for GUI updates.</li> </ul>"},{"location":"development/#local-documentation-preview","title":"Local Documentation Preview","text":"<p>To work on this documentation locally:</p> <pre><code>pip install .[docs]\nmkdocs serve\n</code></pre> <p>Open http://127.0.0.1:8000 in your browser for live reload during edits.</p>"},{"location":"getting-started/","title":"Quickstart","text":"<p>Follow these steps to get amp-benchkit running locally, with or without connected hardware.</p>"},{"location":"getting-started/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/bwedderburn/amp-benchkit.git\ncd amp-benchkit\n</code></pre>"},{"location":"getting-started/#2-create-a-virtual-environment","title":"2. Create a Virtual Environment","text":"<pre><code>python3 -m venv .venv\nsource .venv/bin/activate\npython -m pip install --upgrade pip\n</code></pre>"},{"location":"getting-started/#3-install-dependencies","title":"3. Install Dependencies","text":"<p>For daily development (CLI, tests, GUI) install the editable package with extras:</p> <pre><code>pip install -e .[dev,test,gui]\n</code></pre> <p>To build documentation locally:</p> <pre><code>pip install .[docs]\n</code></pre>"},{"location":"getting-started/#4-run-the-automated-tests","title":"4. Run the Automated Tests","text":"<p>Enable fake hardware for environments without lab instruments:</p> <pre><code>export AMPBENCHKIT_FAKE_HW=1\npython -m pytest -q\n</code></pre>"},{"location":"getting-started/#5-launch-the-gui","title":"5. Launch the GUI","text":"<pre><code>python unified_gui_layout.py gui\n</code></pre> <p>If Qt bindings are missing, reinstall the GUI extra (<code>pip install .[gui]</code>) or run the CLI recipes defined in the README.</p>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Follow the Hardware Setup guide when you have physical instruments.</li> <li>Review the Development Workflow for coding standards, linting, and commit conventions.</li> </ul>"},{"location":"gui-overview/","title":"GUI Layout Overview","text":"<p>The Qt interface (PySide6/PyQt5) mirrors the automation modules and organizes controls into dedicated tabs.</p>"},{"location":"gui-overview/#generator-tab","title":"Generator Tab","text":"<ul> <li>Configure FY3200S waveform, amplitude, offset, and channel routing.</li> <li>Supports loading presets and issuing burst sequences.</li> <li>Displays connection status and last command acknowledgement.</li> </ul>"},{"location":"gui-overview/#scope-tab","title":"Scope Tab","text":"<ul> <li>Select Tektronix TDS2024B channels or the MATH trace.</li> <li>Configure trigger settings (edge slope, level) and acquisition timebase.</li> <li>Capture snapshots or stream data into the automation pipeline.</li> </ul>"},{"location":"gui-overview/#daq-tab","title":"DAQ Tab","text":"<ul> <li>Monitor LabJack U3-HV analog/digital inputs.</li> <li>Fire digital pulses to coordinate with external triggers.</li> <li>Auto-configure device on connect when <code>u3_autoconfig</code> is enabled.</li> </ul>"},{"location":"gui-overview/#automation-tab","title":"Automation Tab","text":"<ul> <li>Run predefined sweeps (frequency response, THD, crest-factor checks).</li> <li>Displays progress updates and logs instrumentation errors.</li> <li>Generates CSV/JSON outputs into the configured session directory.</li> </ul>"},{"location":"gui-overview/#diagnostics-tab","title":"Diagnostics Tab","text":"<ul> <li>Shows consolidated log messages from all drivers.</li> <li>Includes VISA/U3 discovery helpers for troubleshooting.</li> </ul>"},{"location":"gui-overview/#launching-the-gui","title":"Launching the GUI","text":"<pre><code>python unified_gui_layout.py gui\n</code></pre> <p>Run with <code>AMPBENCHKIT_FAKE_HW=1</code> to exercise the UI without hardware. All tabs should load using simulator backends; the testing guide explains expectation for HIL verification.</p>"},{"location":"hardware-setup/","title":"Hardware Setup","text":"<p>This guide covers recommended wiring and configuration for each supported instrument. When hardware is unavailable, enable simulator mode via <code>AMPBENCHKIT_FAKE_HW=1</code>.</p>"},{"location":"hardware-setup/#feeltech-fy3200s-fy3224s","title":"FeelTech FY3200S / FY3224S","text":"<ul> <li>Connect the FY3200S to your host via USB-to-serial adapter.</li> <li>Let the application auto-detect the serial port, or override with <code>FY_PORT=/dev/tty.usbserial-XXXX</code>.</li> <li>Recommended default settings:</li> <li>Waveform: sine</li> <li>Channel: CH1</li> <li>Voltage: 2 Vpp (adjust per DUT)</li> <li>The GUI exposes generator controls; CLI automation uses helper functions in <code>amp_benchkit.fy</code>.</li> </ul>"},{"location":"hardware-setup/#tektronix-tds2024b-oscilloscope","title":"Tektronix TDS2024B Oscilloscope","text":"<ul> <li>Connect over USB and ensure a VISA backend is installed (NI-VISA or <code>pyvisa-py</code>).</li> <li>Override discovery with <code>VISA_RESOURCE=USB0::...::INSTR</code> if multiple scopes are present.</li> <li>For external triggering:</li> <li>Configure slope/level in automation via <code>use_ext</code>, <code>ext_slope</code>, and <code>ext_level</code>.</li> <li>The GUI scope tab provides channel toggles and MATH subtraction helpers.</li> </ul>"},{"location":"hardware-setup/#fft-math-function","title":"FFT Math Function","text":"<p>The TDS 2024B's FFT (Math) function can be controlled programmatically with proper vertical scaling:</p> <ul> <li>Vertical Scale: Controls the amplitude scale of the FFT display</li> <li>For dB mode: typically 1-20 dB/div (common values: 5, 10 dB/div)</li> <li>For linear mode: depends on input signal amplitude</li> <li>Vertical Position: Controls the vertical offset of the FFT trace (-5.0 to +5.0 divisions)</li> <li>Window Functions: RECTANGULAR, HANNING, HAMMING, BLACKMAN, FLATTOP</li> </ul> <p>Example using the enhanced FFT capture:</p> <pre><code>from amp_benchkit.tek import scope_capture_fft_trace, scope_read_fft_vertical_params\n\n# Read current FFT vertical parameters\nparams = scope_read_fft_vertical_params(resource)\nprint(f\"Current scale: {params['scale']} units/div\")\n\n# Capture FFT with specific vertical scale (10 dB/div)\nresult = scope_capture_fft_trace(\n    resource=\"USB0::0x0699::0x036A::C100563::INSTR\",\n    source=1,\n    window=\"HANNING\",\n    scale=\"DB\",\n    vertical_scale=10.0,      # 10 dB/div\n    vertical_position=0.0,     # centered\n)\n</code></pre> <p>See <code>scripts/example_fft_capture.py</code> for a complete example with plotting and CSV export.</p>"},{"location":"hardware-setup/#labjack-u3-hv","title":"LabJack U3-HV","text":"<ul> <li>Install LabJack Exodriver (<code>liblabjackusb</code>) on macOS or Linux as described in <code>EXODRIVER.md</code>.</li> <li>Use USB for most setups; override connection with <code>U3_CONNECTION=ethernet</code> when required.</li> <li>The DAQ tab supports monitoring rails, temperatures, and digital pulses during sweeps.</li> <li>Simulator fallback returns deterministic values when <code>AMPBENCHKIT_FAKE_HW=1</code>.</li> </ul>"},{"location":"hardware-setup/#session-directory","title":"Session Directory","text":"<p>Set <code>AMPBENCHKIT_SESSION_DIR=/path/to/runs</code> to store captures (CSV/JSON/PNG). By default results are saved under <code>results/</code>, which is now <code>.gitignore</code>d for local experimentation.</p>"},{"location":"hardware-setup/#safety-notes","title":"Safety Notes","text":"<ul> <li>Never commit device serial numbers or lab credentials;-store them in environment variables.</li> <li>Document new lab setups in <code>EXODRIVER.md</code>, <code>SECURITY.md</code>, or the docs site so the team has a canonical reference.</li> </ul>"},{"location":"testing/","title":"Testing Matrix","text":"<p>Use this checklist to ensure changes are validated across supported workflows.</p>"},{"location":"testing/#unit-integration-tests","title":"Unit &amp; Integration Tests","text":"<ul> <li><code>python -m pytest -q</code> (with <code>AMPBENCHKIT_FAKE_HW=1</code> for simulator mode).</li> <li>Focus areas:</li> <li>Signal generation helpers (<code>amp_benchkit.fy</code>, <code>signals.py</code>)</li> <li>Scope capture and math subtraction (<code>amp_benchkit.tek</code>)</li> <li>GUI builder smoke tests (<code>tests/test_gui_builders.py</code>)</li> <li>Automation sweeps (<code>tests/test_automation.py</code>)</li> </ul>"},{"location":"testing/#gui-smoke-tests","title":"GUI Smoke Tests","text":"<ol> <li><code>python unified_gui_layout.py gui</code></li> <li>Verify generator, scope, and DAQ tabs load without hardware.</li> <li>Run the \u201cRun Test\u201d or sweep actions using fake hardware.</li> </ol>"},{"location":"testing/#hardware-in-the-loop-hil","title":"Hardware-in-the-Loop (HIL)","text":"<p>For release qualification (v0.3.6 baseline):</p> <pre><code>export AMP_HIL=1\npytest -q -rs\n</code></pre> <p>Exercise scope/generator fixtures individually for failures, e.g.:</p> <pre><code>pytest tests/test_gui_builders.py -k scope\n</code></pre>"},{"location":"testing/#tektronix-auto-scaling-checks","title":"Tektronix auto-scaling checks","text":"<p>When validating sweeps at multiple amplitudes, prefer the new auto-scaling flags so the Tek math trace does not clip between runs:</p> <pre><code>python unified_gui_layout.py thd-math-sweep \\\n  --math --math-order CH1-CH3 \\\n  --amp-vpp 0.3 \\\n  --scope-auto-scale CH1=13,CH3=1 \\\n  --scope-auto-scale-margin 0.8 \\\n  --apply-gold-calibration --cal-target-vpp 0.3 \\\n  --output results/thd_0p3_auto_gold.csv \\\n  --timestamp\n\nOr use the scripted wrapper (auto-detect Tek/FY + scaling):\n\n```bash\npython3 scripts/run_thd_sweep.py \\\n  --amp-vpp 0.5 \\\n  --start 20 --stop 20000 --points 61 \\\n  --scope-auto-scale CH1=12 \\\n  --apply-gold-calibration --cal-target-vpp 0.5 \\\n  --timestamp\n</code></pre> <pre><code>- Tune the gain map (`CHn=value`) to match your probe ratios / stage gain.\n- Keep results under `results/` (e.g. `results/kenwood/baseline_auto_gold/`) so future HIL runs can compare against the same artefacts.\n\nDocument anomalies in `CHANGELOG.md` or new issues.\n\n### -3 dB knee sweep\n\nUse the new headless bandwidth helper when validating amplifier bandwidth or matching against golden references:\n\n```bash\npython unified_gui_layout.py knee-sweep \\\n  --amp-vpp 1.0 \\\n  --output results/knee_sweep.csv \\\n  --apply-gold-calibration \\\n  --knee-drop-db 3.0 \\\n  --smoothing median --smooth-window 5 \\\n  --timestamp\n</code></pre> <ul> <li>Adjust <code>--knee-drop-db</code> for other thresholds (e.g. -1 dB noise floor checks).</li> <li><code>--smoothing</code> / <code>--allow-non-monotonic</code> help tame non-linear response curves before interpolation.</li> <li>CLI output includes Vrms/PkPk columns plus the relative dB delta that should be cross-checked against published specs.</li> </ul>"},{"location":"testing/#fft-snapshot-tek-math-trace","title":"FFT snapshot (Tek math trace)","text":"<p>When you need a quick look at harmonic distribution or the measurement noise floor, capture the on-scope FFT trace:</p> <pre><code>amp-benchkit fft-capture \\\n  --source CH1 \\\n  --window hanning \\\n  --scale db \\\n  --output results/fft_trace.csv \\\n  --top 12\n</code></pre> <ul> <li>Pass <code>--fy-freq</code> / <code>--fy-amp</code> to re-arm the FY source ahead of the grab (falls back to auto-detecting the FY port).</li> <li>Use <code>--smoothing none</code> or custom scripts on the CSV to cross-validate against the analyzer\u2019s THD readings.</li> <li>The CLI prints the strongest bins in human-readable form while the CSV retains the full spectrum for post-processing.</li> <li>Append <code>--timestamp</code> when you want to keep every capture instead of overwriting the previous CSV.</li> </ul> <p>To automate multiple FFT grabs across the audio band, use the sweep helper (handles FY tuning and FFT center/span per point, restoring defaults afterward):</p> <pre><code>amp-benchkit fft-sweep \\\n  --start 100 \\\n  --stop 5000 \\\n  --points 10 \\\n  --amp-vpp 0.5 \\\n  --fft-span 250 \\\n  --fft-zoom 10 \\\n  --output-dir results/fft_sweep \\\n  --timestamp\n</code></pre> <p>To automate multiple FFT grabs across the audio band, use the sweep helper:</p> <pre><code>amp-benchkit fft-sweep \\\n  --start 100 \\\n  --stop 5000 \\\n  --points 10 \\\n  --amp-vpp 0.5 \\\n  --fft-span 500 \\\n  --output-dir results/fft_sweep \\\n  --timestamp\n</code></pre> <ul> <li>The command adjusts the FY generator for each point, repoints the FFT center to the current frequency, then saves timestamped CSV traces.</li> <li>Tweak <code>--fft-span</code> or <code>--fft-zoom</code> so the scope\u2019s FFT window matches your manual configuration.</li> </ul>"},{"location":"testing/#offline-thd-comparison","title":"Offline THD comparison","text":"<p>After capturing both a THD sweep and an FFT trace, reconcile them with the helper script:</p> <pre><code>python scripts/fft_thd_compare.py \\\n  --thd results/thd_sweep.csv \\\n  --fft results/fft_trace.csv \\\n  --auto-fundamental \\\n  --window 200 \\\n  --harmonics 8\n</code></pre> <ul> <li>Swap <code>--auto-fundamental</code> for <code>--fundamental 1000</code> if the FFT is already zoomed to 1\u202fkHz.</li> <li>Tighten <code>--window</code> when the FFT resolution is high to avoid picking up adjacent bins.</li> <li>The script surfaces the harmonic peaks and delta so scope FFT, THD sweep, and analyzer readings can be compared offline.</li> </ul> <p>For bulk FFT sweep runs, generate a consolidated report:</p> <pre><code>python scripts/fft_vs_thd_summary.py \\\n  --fft-dir results/fft_sweep \\\n  --thd results/thd_sweep.csv \\\n  --window 50 \\\n  --harmonics 8\n</code></pre> <p>This writes <code>fft_thd_summary.csv</code> and prints per-frequency deltas so you can confirm the FFT captures align with the THD sweep.</p>"},{"location":"testing/#thdn-characterisation-workflows","title":"THD+N characterisation workflows","text":"<p>Two new scripts automate the stepped single-tone measurements discussed in the \u201chigh quality\u201d guidance:</p> <pre><code># THD+N vs frequency at constant output power (defaults: 1 W and ~140 W)\npython scripts/thdn_vs_frequency.py \\\n  --visa-resource USB0::0x0699::0x036A::C100563::INSTR \\\n  --load-ohms 8 \\\n  --power 1 --power 140 \\\n  --points 31 --timestamp\n\n# THD+N vs output power at 1 kHz (log sweep from 10 mW to 150 W)\npython scripts/thdn_vs_power.py \\\n  --visa-resource USB0::0x0699::0x036A::C100563::INSTR \\\n  --frequency 1000 \\\n  --power-start 0.01 --power-stop 150 --points 25 --timestamp\n</code></pre> <p>Both helpers compute the required Vrms/Vpp from the requested power and load impedance, use the THD sweep engine under the hood, and emit per-run summaries (in addition to per-point CSVs). Use the first script at low power (~1\u202fW) and near rated power to capture THD+N vs frequency curves, then run the power sweep to map THD+N vs output level at 1\u202fkHz. Feed the resulting CSVs into your plotting tool of choice to reproduce the industry-standard plots.</p>"},{"location":"testing/#continuous-integration","title":"Continuous Integration","text":"<p>GitHub Actions run: - <code>CI</code> workflow (matrix Python versions, coverage) - <code>pre-commit</code> (lint/type checks) - <code>docs</code> (MkDocs build, see workflow details)</p> <p>Monitor failures with:</p> <pre><code>gh run list --status failure --branch main\n</code></pre> <p>Follow up on red runs before merging feature branches.</p>"}]}