name: Codex Auto-Fix (on CI failure)

on:
  workflow_run:
    workflows: ["CI"]
    types: [completed]

permissions:
  contents: write
  pull-requests: write
  workflows: write

jobs:
  codex_autofix:
    if: ${{ github.event.workflow_run.conclusion == 'failure' && (github.event.workflow_run.event != 'pull_request' || github.event.workflow_run.head_repository.full_name == github.repository) }}
    runs-on: ubuntu-latest
    env:
      FAILED_WORKFLOW: ${{ github.event.workflow_run.name }}
      FAILED_URL: ${{ github.event.workflow_run.html_url }}
      FAILED_BRANCH: ${{ github.event.workflow_run.head_branch }}
      FAILED_SHA: ${{ github.event.workflow_run.head_sha }}

    steps:
      - name: Ensure workflow run is trusted
        id: trust
        shell: bash
        run: |
          set -euo pipefail
          event="${{ github.event.workflow_run.event }}"
          if [[ "${event}" == "pull_request" ]]; then
            pr_repo="${{ github.event.workflow_run.pull_requests[0].head.repo.full_name }}"
            if [[ -z "${pr_repo}" || "${pr_repo}" != "${{ github.repository }}" ]]; then
              echo "Workflow triggered by untrusted pull request; skipping auto-fix."
              echo "trusted=false" >> "$GITHUB_OUTPUT"
              exit 0
            fi
          fi
          echo "trusted=true" >> "$GITHUB_OUTPUT"

      - name: Checkout the failing commit
        if: steps.trust.outputs.trusted == 'true'
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Try tests locally (non-blocking)
        if: steps.trust.outputs.trusted == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -e .[test,dev]
          pytest -q || true
          ruff check . || true
          mypy --ignore-missing-imports amp_benchkit || true

      - name: Run Codex to fix the failure
        if: steps.trust.outputs.trusted == 'true'
        id: codex_fix
        uses: openai/codex-action@v1
        with:
          openai-api-key: ${{ secrets.OPENAI_API_KEY }}
          sandbox: workspace-write
          prompt: |
            Repo: ${{ github.repository }}
            Branch: ${{ env.FAILED_BRANCH }}
            CI URL: ${{ env.FAILED_URL }}
            Commit: ${{ env.FAILED_SHA }}

            Task: Investigate why the CI named "${{ env.FAILED_WORKFLOW }}" failed and make the minimal, safe code changes to fix it.
            Context: amp-benchkit is a Python project. The CI runs pytest with coverage, ruff, and mypy (allow incomplete).
            Steps:
              1) Run tests and linters locally.
              2) Read error output, identify the root cause.
              3) Modify code and/or tests to fix the failure.
              4) Re-run checks locally to confirm green.
              5) Write a concise commit message describing the fix.

      - name: Create and push branch with changes
        if: steps.trust.outputs.trusted == 'true'
        id: push_changes
        run: |
          set -e
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          BRANCH="codex/autofix-${FAILED_BRANCH}-${FAILED_SHA:0:7}"
          echo "branch=${BRANCH}" >> "$GITHUB_OUTPUT"
          git checkout -b "$BRANCH"
          git add -A
          if git diff --staged --quiet; then
            echo "No changes from Codex; exiting."
            echo "no_changes=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          echo "no_changes=false" >> "$GITHUB_OUTPUT"
          git commit -m "Codex auto-fix for failing CI on '${FAILED_BRANCH}' (${FAILED_SHA:0:7})"
          git push origin "$BRANCH"

      - name: Open pull request
        if: steps.trust.outputs.trusted == 'true' && steps.push_changes.outputs.no_changes != 'true'
        if: steps.push_changes.outputs.no_changes != 'true'
        uses: actions/github-script@v7
        env:
          AUTOFIX_BRANCH: ${{ steps.push_changes.outputs.branch }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branch = process.env.AUTOFIX_BRANCH;
            if (!branch) {
              core.setFailed('Auto-fix branch name missing.');
              return;
            }
            const title = `Codex auto-fix for failing CI on '${process.env.FAILED_BRANCH}'`;
            const body = `This PR was created automatically after CI failed.\n\n- Workflow: **${process.env.FAILED_WORKFLOW}**\n- Run: ${process.env.FAILED_URL}\n- Commit: ${process.env.FAILED_SHA}\n\nPlease review the changes generated by Codex.`;
            const base = process.env.FAILED_BRANCH;
            try {
              const { data: pr } = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title,
                head: branch,
                base,
                body,
              });
              core.info(`PR created: ${pr.html_url}`);
            } catch (e) {
              core.setFailed(`Failed to create PR: ${e.message}`);
            }
